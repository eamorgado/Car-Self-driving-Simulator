# import the necessary packages
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

from nms import *
import config
import tensorflow as tf
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.models import load_model
import numpy as np
import argparse
import imutils
import pickle
import cv2 as cv


#Parse cmd line args (path to image)
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
	help="path to input image")
args = vars(ap.parse_args())

image_path = args["image"]

##
#Load Model and labels
print("[INFO] loading model and label binarizer...")
model = load_model(config.MODEL_PATH)
lb = pickle.loads(open(config.ENCODER_PATH, "rb").read())

#Load image + resize
#TODO: change resize size to app/Carla
image = cv.imread(args["image"])
image = imutils.resize(image, width=720)



# run selective search on the image to generate bounding box proposal
# regions
print("[INFO] running selective search...")
ss = cv.ximgproc.segmentation.createSelectiveSearchSegmentation()
ss.setBaseImage(image)
ss.switchToSelectiveSearchFast()
rects = ss.process()




#Go through a define number of boxes/proposals and get params (box coordinates)

# initialize the list of region proposals that we'll be classifying
# along with their associated bounding boxes
proposals = []
boxes = []


# loop over the region proposal bounding box coordinates generated by
# running selective search
for (x, y, w, h) in rects[:config.MAX_PROPOSALS_INFER]: #200 boxes
	# extract the region from the input image, convert it from BGR to
	# RGB channel ordering, and then resize it to the required input
	# dimensions of our trained CNN
	roi = image[y:y + h, x:x + w]
	roi = cv.cvtColor(roi, cv.COLOR_BGR2RGB)
	roi = cv.resize(roi, config.INPUT_DIMS,
		interpolation=cv.INTER_CUBIC)


	# further preprocess the ROI
	roi = img_to_array(roi)


	#image preprocess for mobile net v2
	roi = preprocess_input(roi)


	# update our proposals and bounding boxes lists
	proposals.append(roi)
	boxes.append((x, y, x + w, y + h))


#Classify proposals
# convert the proposals and bounding boxes into NumPy arrays
proposals = np.array(proposals, dtype="float32")
boxes = np.array(boxes, dtype="int32")
print("[INFO] proposal shape: {}".format(proposals.shape))


# classify each of the proposal ROIs using fine-tuned model
print("[INFO] classifying proposals...")
proba = model.predict(proposals)

#print(proba)


# find the index of all predictions that are positive for the
# "signal" class
print("[INFO] applying NMS...")

#Get max probability prediction index => get classes for that index
#np.argmax(proba, axis=1) => find index of max probability for all proposals (returns list)
#lb.classes_[np.argmax(proba, axis=1)] => will classify each proposal based on the max probability index


positive_class_index = np.where(lb.classes_ == config.POSITIVE_CLASS)[0][0]
labels = lb.classes_[np.argmax(proba, axis=1)]
#print(labels)

#Get only positive proposals => returns array
idxs = np.where(labels == config.POSITIVE_CLASS)[0]


#Get bounding boxes for only positive classes
boxes = boxes[idxs]

# label probabilities associated with the positive class (in our case positive class is )
proba = proba[idxs][:, positive_class_index]


#Minimum probability threshold
idxs = np.where(proba >= config.MIN_PROBA)
boxes = boxes[idxs]
proba = proba[idxs]




#Visualize Results -------------------------------------
# clone the original image so that we can draw on it
clone = image.copy()

#print(boxes)
# loop over the bounding boxes and associated probabilities
for (box, prob) in zip(boxes, proba):
	# draw the bounding box, label, and probability on the image
	(startX, startY, endX, endY) = box
	color = (0, 255, 0)
	cv.rectangle(clone, (startX, startY), (endX, endY), color, 2)

	#Padding for class text
	y = startY - 10 if startY - 10 > 10 else startY + 10
	text=config.POSITIVE_CLASS.capitalize() + ": {:.2f}%".format(prob * 100)


	cv.putText(clone, text, (startX, y),cv.FONT_HERSHEY_SIMPLEX, 0.45, color, 2)

# show the output after *before* running NMS
cv.imshow("Before NMS", clone)



# run non-maxima suppression on the bounding boxes
print(boxes.shape,'\t',proba.shape)
boxIdxs = non_max_suppression(boxes, 0.5)

# loop over the bounding box indexes
for i in boxIdxs:
	# draw the bounding box, label, and probability on the image
	(startX, startY, endX, endY) = boxes[i]

	color = (0, 255, 0)
	cv.rectangle(image, (startX, startY), (endX, endY),color, 2)

	y = startY - 10 if startY - 10 > 10 else startY + 10
	text= config.POSITIVE_CLASS.capitalize() + ": {:.2f}%".format(proba[i] * 100)
	cv.putText(image, text, (startX, y),cv.FONT_HERSHEY_SIMPLEX, 0.45, color, 2)
# show the output image *after* running NMS

image = cv.resize(image,(940,720))
cv.imshow("After NMS", image)
cv.waitKey(0)